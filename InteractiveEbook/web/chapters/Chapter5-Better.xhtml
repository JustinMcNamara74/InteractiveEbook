<?xml version="1.0" encoding="utf-8"?>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:ui="http://java.sun.com/jsf/facelets" xmlns:b="http://bootsfaces.net/ui"
      xmlns:f="http://java.sun.com/jsf/core">
  <body>
      <ui:composition>
          
        <b:modal id="amodal" title="Modal Example">
        <p>Modal body</p>
        <f:facet name="footer">
        <b:button value="close" dismiss="modal" onclick="return false;"/>
        <b:button value="Ok" look="primary" dismiss="modal" onclick="return false;"/>
        </f:facet>
        </b:modal>

    <div id="container">
      <div id="margin"></div>
      <div id="chapterText" class="cleanuphtml-4">
        <a id="top"></a>
        <p class="chapterHeading cleanuphtml-1">
          <strong>CHAPTER 5</strong>
        </p>
        <p class="chapterHeading">
          <strong>LOOPS</strong>
        </p>
        <p>
           <strong>Objectives</strong>
        </p>
        <ul>
          <li>To write programs for executing statements repeatedly using a <span class="highlightedWord">while</span> loop (§5.2).
          </li>
          <li>To follow the loop design strategy to develop loops (§§5.2.1-5.2.3).
          </li>
          <li>To control a loop with a sentinel value (§5.2.4).
          </li>
          <li>To obtain large input from a file using input redirection rather than typing from the keyboard (§5.2.5).
          </li>
          <li>To write loops using <span class="highlightedWord">do-while</span> statements (§5.3).
          </li>
          <li>To write loops using <span class="highlightedWord">for</span> statements (§5.4).
          </li>
          <li>To discover the similarities and differences of three types of loop statements (§5.5).
          </li>
          <li>To write nested loops (§5.6).
          </li>
          <li>To learn the techniques for minimizing numerical errors (§5.7).
          </li>
          <li>To learn loops from a variety of examples (<span class="highlightedWord">GCD</span>, <span class="highlightedWord">FutureTuition</span>, <span class="highlightedWord">Dec2Hex</span>)
          (§5.8).
          </li>
          <li>To implement program control with <span class="highlightedWord">break</span> and <span class="highlightedWord">continue</span> (§5.9).
          </li>
          <li>To process characters in a string using a loop in a case study for checking palindrome (§5.10).
          </li>
          <li>To write a program that displays prime numbers (§5.11).
          </li>
        </ul><!-- SECTION 5.1 -->
        <a id="5-1"></a>
        <p class="sectionHeading">
          5.1 Introduction
        </p>
        <p class="keyPoint">
          A loop can be used to tell a program to execute statements repeatedly.
        </p>
        <p>
          Suppose that you need to display a string (e.g., <span class="highlightedWord">Welcome to Java!</span>) a hundred times. It would be tedious to have to write the following statement a
          hundred times:
        </p>
        <p>
          <div class="keyTerm" value="problem"></div><img width="352" height="53" src="chapters/Chapter5-Better_clip_image002.jpg" alt="" />
        </p>
        <p>
          So, how do you solve this problem?
        </p>
        <p>
              Java provides a powerful construct called a <span class="keyTerm" value="loop">loop</span> that controls how many times an operation or a sequence of operations is performed in
          succession. Using a loop statement, you simply tell the computer to display a string a hundred times without having to code the print statement a hundred times, as follows:
        </p>
        <pre class="javaCode">
  <span class="javaKeyWord">int</span> count = <span class="javaInteger">0</span>;
    <span class="javaKeyWord">while</span> (count &lt; <span class="javaInteger">100</span>) {
    System.out.println(<span class="javaString">"Welcome to Java!"</span>);
    count++;
  }
</pre>
        <p>
          The variable <span class="highlightedWord">count</span> is initially <span class="highlightedWord">0</span>. The loop checks whether <span class="highlightedWord">count &lt; 100</span> is
          <span class="highlightedWord">true</span>. If so, it executes the loop body to display the message <span class="highlightedWord">Welcome to Java!</span> and increments <span class=
          "highlightedWord">count</span> by <span class="highlightedWord">1</span>. It repeatedly executes the loop body until <span class="highlightedWord">count &lt; 100</span> becomes <span class=
          "highlightedWord">false</span>. When <span class="highlightedWord">count &lt; 100</span> is <span class="highlightedWord">false</span> (i.e., when <span class="highlightedWord">count</span>
          reaches <span class="highlightedWord">100</span>), the loop terminates and the next statement after the loop statement is executed.
        </p>
        <p>
              <em>Loops</em> are constructs that control repeated executions of a block of statements. The concept of looping is fundamental to programming. Java provides three types of loop
          statements: <span class="highlightedWord">while</span> loops, <span class="highlightedWord">do-while</span> loops, and <span class="highlightedWord">for</span> loops.
        </p>
        <p>
           
        </p><!-- SECTION 5.2 -->
        <a id="5-2"></a>
        <p class="sectionHeading">
          5.2 The <span class="highlightedWord">while</span> Loop
        </p>
        <p class="keyPoint">
          A <span class="highlightedWord">while</span> loop executes statements repeatedly while the condition is true.
        </p>
        <p>
          <div class="keyTerm" value="while loop"></div>The syntax for the <span class="highlightedWord">while</span> loop is:
        </p>
        <pre class="javaCode">
  <span class="javaKeyWord">while</span> (loop-continuation-condition) {
    <span class="javaComment">// Loop body</span>
    Statement(s);
  }
</pre>
        <p>
              Figure 5.1a shows the <span class="highlightedWord">while</span>-loop flowchart. The part of the loop that contains the statements to be repeated is called the <span class=
          "keyTerm">loop body</span>. A one-time execution of a loop body is referred to as an <span class="keyTerm">iteration</span> (or <em>repetition</em>) <em>of the loop</em>. Each loop contains
          a <span class="keyTerm">loop-continuation-condition</span> , a Boolean expression that controls the execution of the body. It is evaluated each time to determine if the loop body is
          executed. If its evaluation is <span class="highlightedWord">true</span>, the loop body is executed; if its evaluation is <span class="highlightedWord">false</span>, the entire loop
          terminates and the program control turns to the statement that follows the <span class="highlightedWord">while</span> loop.
        </p>
        <p class="figureText">
          <img width="484" height="231" src="chapters/Chapter5-Better_image002.jpg" alt="" /><br />
          <span class="figureHeading">Figure 5.1:</span> The <span class="highlightedWord">while</span> loop repeatedly executes the statements in the loop body when the <span class=
          "highlightedWord">loop-continuation-condition</span> evaluates to <span class="highlightedWord">true</span>.
        </p>
        <p>
              The loop for displaying <span class="highlightedWord">Welcome to Java!</span> a hundred times introduced in the preceding section is an example of a <span class=
          "highlightedWord">while</span> loop. Its flowchart is shown in Figure 5.1b. The <span class="highlightedWord">loop-continuation-condition</span> is <span class="highlightedWord">count &lt;
          100</span> and the loop body contains the following two statements:
        </p>
        <p>
          <img width="346" height="81" src="chapters/Chapter5-Better_image003.jpg" alt="" />
        </p>
        <p>
          In this example, you know exactly how many times the loop body needs to be executed because the control variable <span class="highlightedWord">count</span> is used to count the number of
          executions. This type of loop is known as a <span class="keyTerm">counter-controlled loop</span>.
        </p>
        <div class="noteBox">
          <span class="noteNOTE">NOTE</span>
          <p>
            The <span class="highlightedWord">loop-continuation-condition</span> must always appear inside the parentheses. The braces enclosing the loop body can be omitted only if the loop body
            contains one or no statement.
          </p>
        </div>
        <p>
          Here is another example to help understand how a loop works.
        </p>
        <pre class="javaCode">
  <span class="javaKeyWord">int</span> sum = <span class="javaInteger">0</span>, i = <span class="javaInteger">1</span>;
    <span class="javaKeyWord">while</span> (i &lt; <span class="javaInteger">10</span>) {
    sum = sum + i;
    i++;
  }
  System.out.println(<span class="javaString">"sum is "</span> + sum); <span class="javaComment">// sum is 45</span>
</pre>
        <p>
          If <span class="highlightedWord">i &lt; 10</span> is <span class="highlightedWord">true</span>, the program adds <span class="highlightedWord">i</span> to <span class=
          "highlightedWord">sum</span>. Variable <span class="highlightedWord">i</span> is initially set to <span class="highlightedWord">1</span>, then is incremented to <span class=
          "highlightedWord">2</span>, <span class="highlightedWord">3</span>, and up to <span class="highlightedWord">10</span>. When <span class="highlightedWord">i</span> is <span class=
          "highlightedWord">10</span>, <span class="highlightedWord">i &lt; 10</span> is <span class="highlightedWord">false</span>, so the loop exits. Therefore, the sum is <span class=
          "highlightedWord">1 + 2 + 3 + ... + 9 = 45</span>.
        </p>
        <p>
              What happens if the loop is mistakenly written as follows?
        </p>
        <pre class="javaCode">
  <span class="javaKeyWord">int</span> sum = <span class="highlightedWord">0</span>, i = <span class="highlightedWord">1</span>;
  <span class="javaKeyWord">while</span> (i &lt; <span class="highlightedWord">10</span>) {
    sum = sum + i;
  }
</pre>
        <p>
          This loop is infinite, because <span class="highlightedWord">i</span> is always <span class="highlightedWord">1</span> and <span class="highlightedWord">i &lt; 10</span> will always be
          <span class="highlightedWord">true</span>.
        </p>
        <div class="noteBox">
          <span class="noteNOTE">NOTE</span>
          <p>
            Make sure that the <span class="highlightedWord">loop-continuation-condition</span> eventually becomes <span class="highlightedWord">false</span> so that the loop will terminate. A common
            programming error involves <span class="keyTerm">infinite loops</span> (i. e., the loop runs forever). If your program takes an unusually long time to run and does not stop, it may have
            an infinite loop. If you are running the program from the command window, press <em>CTRL+C</em> to stop it.
          </p>
        </div>
        <br/>
        <div class="cautionBox">
          <span class="cautionCAUTION">CAUTION</span>
          <p>
            Programmers often make the mistake of executing a loop one more or less time. This is commonly known as the <span class="keyTerm">off-by-one error</span>. For example, the following loop
            displays <span class="highlightedWord">Welcome to Java</span> 101 times rather than 100 times. The error lies in the condition, which should be <span class="highlightedWord">count &lt;
            100</span> rather than <span class="highlightedWord">count &lt;= 100</span>.
          </p>
          <pre class="javaCode">
  <span class="javaKeyWord">int</span> count = <span class="javaInteger">0</span>;
  <span class="javaKeyWord">while</span> (count &lt;= <span class="javaInteger">100</span>) {
    System.out.println(<span class="javaString">"Welcome to Java!"</span>);
    count++;
  }
</pre>
        </div>
        <p>
              Recall that Listing 3.1, AdditionQuiz.java, gives a program that prompts the user to enter an answer for a question on addition of two single digits. Using a loop, you can now rewrite
          the program to let the user repeatedly enter a new answer until it is correct, as shown in Listing 5.1.
        </p>
        <p>
          <span class="listingHeadingMain">Listing 5.1 -</span> <span class="listingHeadingTitle">RepeatAdditionQuiz.java</span>
        </p><iframe src="chapters/animation/Listing5_1.html" width="100%" height="500px" frameborder="0"></iframe>
        <p>
              The loop in lines 15-19 repeatedly prompts the user to enter an <span class="highlightedWord">answer</span> when <span class="highlightedWord">number1 + number2 != answer</span> is
          <span class="highlightedWord">true</span>. Once <span class="highlightedWord">number1 + number2 != answer</span> is <span class="highlightedWord">false</span>, the loop exits.
        </p>
        <p>
          <span class="subSectionHeading">5.2.1 Case Study: Guessing Numbers</span>
        </p>
        <p>
          The problem is to guess what number a computer has in mind. You will write a program that randomly generates an integer between <span class="highlightedWord">0</span> and <span class=
          "highlightedWord">100</span>, inclusive. The program prompts the user to enter a number continuously until the number matches the randomly generated number. For each user input, the program
          tells the user whether the input is too low or too high, so the user can make the next guess intelligently. Here is a sample run:
        </p>
        <div class="outputBox">
          <pre class="outputText">
Guess a magic number between 0 and 100

Enter your guess: 50 <img src="chapters/RUN-icon.png" class="cleanuphtml-2" alt="" />
Your guess is too high

Enter your guess: 25 <img src="chapters/RUN-icon.png" class="cleanuphtml-2" alt="" />
Your guess is too low

Enter your guess: 42 <img src="chapters/RUN-icon.png" class="cleanuphtml-2" alt="" />
Your guess is too high

Enter your guess: 39 <img src="chapters/RUN-icon.png" class="cleanuphtml-2" alt="" />
Yes, the number is 39
</pre>
        </div>
        <p>
              <div class="keyTerm" value="intelligent guess"></div>The magic number is between <span class="highlightedWord">0</span> and <span class="highlightedWord">100</span>. To minimize the number of guesses, enter <span class=
          "highlightedWord">50</span> first. If your guess is too high, the magic number is between <span class="highlightedWord">0</span> and <span class="highlightedWord">49</span>. If your guess
          is too low, the magic number is between <span class="highlightedWord">51</span> and <span class="highlightedWord">100</span>. So, you can eliminate half of the numbers from further
          consideration after one guess.
        </p>
        <p>
              How do you write this program? Do you immediately begin coding? No. It is important to <span class="keyTerm">think before coding</span>. Think how you would solve the problem without
          writing a program. You need first to generate a random number between <span class="highlightedWord">0</span> and <span class="highlightedWord">100</span>, inclusive, then to prompt the user
          to enter a guess, and then to compare the guess with the random number.
        </p>
        <p>
              It is a good practice to <span class="keyTerm">code incrementally</span> one step at a time. For programs involving loops, if you don't know how to write a loop right away, you may
          first write the code for executing the loop one time, and then figure out how to repeatedly execute the code in a loop. For this program, you may create an initial draft, as shown in
          Listing 5.2.
        </p>
        <p>
          <span class="listingHeadingMain">Listing 5.2 -</span> <span class="listingHeadingTitle">GuessNumberOneTime.java</span>
        </p>
        <pre class="javaCode">   1  <span class="javaKeyWord">import</span> java.util.Scanner;
   2 
   3  <span class="javaKeyWord">public class</span> GuessNumberOneTime {
   4    <span class="javaKeyWord">public static void</span> main(String[] args) {
   5      <span class="javaComment">// Generate a random number to be guessed</span>
<div class="keyTerm" value="generate a number"></div>   6      <span class="javaHighlighted"><span class="javaKeyWord">int</span> number = (</span><span class="javaHighlighted javaKeyWord">int</span><span class="javaHighlighted">)(Math.random() * </span><span class="javaHighlighted javaInteger">101</span><span class="javaHighlighted">);</span>
   7 
   8      Scanner input = <span class="javaKeyWord">new</span> Scanner(System.in);
   9      System.out.println(<span class="javaString">"Guess a magic number between 0 and 100"</span>);
  10 
  11      <span class="javaComment">// Prompt the user to guess the number</span>
  12      System.out.print(<span class="javaString">"\nEnter your guess: "</span>);
<div class="keyTerm" value="enter a guess"></div>  13      <span class="javaHighlighted javaKeyWord">int</span><span class="javaHighlighted"> guess = input.nextInt();</span>
  14       
  15      <span class="javaHighlighted javaKeyWord">if</span><span class="javaHighlighted"> (guess == number)</span>
<div class="keyTerm" value="correct guess?"></div>  16        System.out.println(<span class="javaString">"Yes, the number is "</span> + number);
  17      <span class="javaHighlighted javaKeyWord">else if</span><span class="javaHighlighted"> (guess > number)</span>
<div class="keyTerm" value="too high?"></div>  18        System.out.println(<span class="javaString">"Your guess is too high"</span>);
  19      <span class="javaKeyWord">else</span>
<div class="keyTerm" value="too low?"></div>  20        System.out.println(<span class="javaString">"Your guess is too low"</span>);
  21    }
  22  }</pre>
        <p>
              When you run this program, it prompts the user to enter a guess only once. To let the user enter a guess repeatedly, you may wrap the code in lines 11-20 in a loop as follows:
        </p>
        <pre class="javaCode">
  <span class="javaHighlighted javaKeyWord">while</span><span class="javaHighlighted"> (</span><span class="javaHighlighted javaKeyWord">true</span><span class="javaHighlighted">) {</span>
    <span class="javaComment">// Prompt the user to guess the number</span>
    System.out.print(<span class="javaString">"\nEnter your guess: "</span>);
    guess = input.nextInt();
  
    <span class="javaKeyWord">if</span> (guess == number)
      System.out.println(<span class="javaString">"Yes, the number is "</span> + number);
    <span class="javaKeyWord">else if</span> (guess &gt; number)
      System.out.println(<span class="javaString">"Your guess is too high"</span>);
    <span class="javaKeyWord">else</span>
      System.out.println(<span class="javaString">"Your guess is too low"</span>); 
  } <span class="javaComment">// End of loop</span>
</pre>
        <p>
              This loop repeatedly prompts the user to enter a guess. However, this loop is not correct, because it never terminates. When <span class="highlightedWord">guess</span> matches
          <span class="highlightedWord">number</span>, the loop should end. So, the loop can be revised as follows:
        </p>
        <pre class="javaCode">
  <span class="javaHighlighted javaKeyWord">while</span><span class="javaHighlighted"> (guess != number) {</span>
    <span class="javaComment">// Prompt the user to guess the number</span>
    System.out.print(<span class="javaString">"\nEnter your guess: "</span>);
    guess = input.nextInt();
  
    <span class="javaKeyWord">if</span> (guess == number)
      System.out.println(<span class="javaString">"Yes, the number is "</span> + number);
    <span class="javaKeyWord">else if</span> (guess &gt; number)
      System.out.println(<span class="javaString">"Your guess is too high"</span>);
    <span class="javaKeyWord">else</span>
      System.out.println(<span class="javaString">"Your guess is too low"</span>); 
  } <span class="javaComment">// End of loop</span>
</pre>
        <p>
          The complete code is given in Listing 5.3.
        </p><span class="listingHeadingMain">Listing 5.3 -</span> <span class="listingHeadingTitle">GuessNumber.java</span>
        <pre class="javaCode">   1  <span class="javaKeyWord">import</span> java.util.Scanner;
   2 
   3  <span class="javaKeyWord">public class</span> GuessNumber {
   4    <span class="javaKeyWord">public static</span> void main(String[] args) {
   5      <span class="javaComment">// Generate a random number to be guessed</span>
<div class="keyTerm" value="generate a number"></div>   6      <span class="javaKeyWord">int</span> number = (<span class="javaKeyWord">int</span>)(Math.random() * <span class="javaInteger">101</span>);
   7 
   8      Scanner input = <span class="javaKeyWord">new</span> Scanner(System.in);
   9      System.out.println(<span class="javaString">"Guess a magic number between 0 and 100"</span>);
  10 
  11      <span class="javaHighlighted javaKeyWord">int</span><span class="javaHighlighted"> guess = </span><span class="javaHighlighted javaInteger">-1</span><span class="javaHighlighted">;</span>
  12      <span class="javaHighlighted javaKeyWord">while</span><span class="javaHighlighted"> (guess != number) {</span>
  13        <span class="javaComment">// Prompt the user to guess the number</span>
  14        System.out.print(<span class="javaString">"\nEnter your guess: "</span>);
<div class="keyTerm" value="enter a guess"></div>  15        guess = input.nextInt();
  16 
  17        <span class="javaKeyWord">if</span> (guess == number)
  18          System.out.println(<span class="javaString">"Yes, the number is "</span> + number);
  19        <span class="javaKeyWord">else if</span> (guess > number)
<div class="keyTerm" value="too high?"></div>  20         System.out.println(<span class="javaString">"Your guess is too high"</span>);
  21        <span class="javaKeyWord">else</span>
<div class="keyTerm" value="too low?"></div>  22         System.out.println(<span class="javaString">"Your guess is too low"</span>); 
  23      } <span class="javaComment">// End of loop</span>
  24    }
  25  }</pre>
        <div class="traceBox">
          <table width="100%" cellpadding="5" cellspacing="0">
            <tr>
              <th colspan="2" class="cleanuphtml-3">
                 
              </th>
              <th width="15%" class="cleanuphtml-3">
                line#
              </th>
              <th width="15%" class="cleanuphtml-3">
                number
              </th>
              <th width="15%" class="cleanuphtml-3">
                guess
              </th>
              <th width="35%" class="cleanuphtml-3">
                output
              </th>
            </tr>
            <tr>
              <td width="16%" rowspan="2" align="right" valign="middle">
                 
              </td>
              <td width="4%" rowspan="2" class="traceBoxIterationBracket">
                 
              </td>
              <td>
                <strong>6</strong>
              </td>
              <td class="highlightedWord">
                39
              </td>
              <td class="highlightedWord"></td>
              <td class="highlightedWord"></td>
            </tr>
            <tr>
              <td>
                <strong>11</strong>
              </td>
              <td class="highlightedWord">
                 
              </td>
              <td class="highlightedWord">
                -1
              </td>
              <td class="highlightedWord"></td>
            </tr>
            <tr>
              <td rowspan="2" align="right" valign="middle">
                iteration 1
              </td>
              <td rowspan="2" align="right" valign="middle" class="traceBoxIterationBracket">
                {
              </td>
              <td>
                <strong>15</strong>
              </td>
              <td class="highlightedWord">
                 
              </td>
              <td class="highlightedWord">
                50
              </td>
              <td class="highlightedWord"></td>
            </tr>
            <tr>
              <td>
                <strong>20</strong>
              </td>
              <td class="highlightedWord">
                 
              </td>
              <td class="highlightedWord"></td>
              <td class="highlightedWord">
                Your guess is too high
              </td>
            </tr>
            <tr>
              <td rowspan="2" align="right" valign="middle">
                iteration 2
              </td>
              <td rowspan="2" align="right" valign="middle" class="traceBoxIterationBracket">
                {
              </td>
              <td>
                <strong>15</strong>
              </td>
              <td class="highlightedWord">
                 
              </td>
              <td class="highlightedWord">
                25
              </td>
              <td class="highlightedWord"></td>
            </tr>
            <tr>
              <td>
                <strong>22</strong>
              </td>
              <td class="highlightedWord">
                 
              </td>
              <td class="highlightedWord"></td>
              <td class="highlightedWord">
                Your guess is too low
              </td>
            </tr>
            <tr>
              <td rowspan="2" align="right" valign="middle">
                iteration 3
              </td>
              <td rowspan="2" align="right" valign="middle" class="traceBoxIterationBracket">
                {
              </td>
              <td>
                <strong>15</strong>
              </td>
              <td class="highlightedWord">
                 
              </td>
              <td class="highlightedWord">
                42
              </td>
              <td class="highlightedWord"></td>
            </tr>
            <tr>
              <td>
                <strong>20</strong>
              </td>
              <td class="highlightedWord">
                 
              </td>
              <td class="highlightedWord"></td>
              <td class="highlightedWord">
                Your guess is too high
              </td>
            </tr>
            <tr>
              <td rowspan="2" align="right" valign="middle">
                iteration 4
              </td>
              <td rowspan="2" align="right" valign="middle" class="traceBoxIterationBracket">
                {
              </td>
              <td>
                <strong>15</strong>
              </td>
              <td class="highlightedWord">
                 
              </td>
              <td class="highlightedWord">
                39
              </td>
              <td class="highlightedWord"></td>
            </tr>
            <tr>
              <td>
                <strong>18</strong>
              </td>
              <td class="highlightedWord">
                 
              </td>
              <td class="highlightedWord"></td>
              <td class="highlightedWord">
                Yes, the number is 39
              </td>
            </tr>
          </table>
        </div>
        <p>
          The program generates the magic number in line 6 and prompts the user to enter a guess continuously in a loop (lines 12-23). For each guess, the program checks whether the guess is correct,
          too high, or too low (lines 17-22). When the guess is correct, the program exits the loop (line 12). Note that <span class="highlightedWord">guess</span> is initialized to <span class=
          "highlightedWord">-1</span>. Initializing it to a value between <span class="highlightedWord">0</span> and <span class="highlightedWord">100</span> would be wrong, because that could be the
          number to be guessed.
        </p>
        <p class="subSectionHeading">
          5.2.2 Loop Design Strategies
        </p>
        <p>
          Writing a correct loop is not an easy task for novice programmers. Consider three steps when writing a loop.
        </p>
        <p>
              Step 1: Identify the statements that need to be repeated.
        </p>
        <p>
              Step 2: Wrap these statements in a loop like this:
        </p>
        <pre class="javaCode">
    <span class="javaKeyWord">while</span> (<span class="javaKeyWord">true</span>) {
      Statements;
    }
</pre>
        <p>
              Step 3: Code the <span class="highlightedWord">loop-continuation-condition</span> and add appropriate statements for controlling the loop.
        </p>
        <pre class="javaCode">
    <span class="javaKeyWord">while</span> (loop-continuation-condition) {
      Statements;
      Additional statements for controlling the loop;
    }
</pre>
        <p class="subSectionHeading">
          5.2.3 Case Study: Multiple Subtraction Quiz
        </p>
        <div class="videoNote" value="Multiple subtraction quiz"></div>
        <p>
          The Math subtraction learning tool program in Listing 3.3, SubtractionQuiz.java, generates just one question for each run. You can use a loop to generate questions repeatedly. How do you
          write the code to generate five questions? Follow the loop design strategy. First identify the statements that need to be repeated. These are the statements for obtaining two random
          numbers, prompting the user with a subtraction question, and grading the question. Second, wrap the statements in a loop. Third, add a loop control variable and the <span class=
          "highlightedWord">loop-continuation-condition</span> to execute the loop five times.
        </p>
        <p>
              Listing 5.4 gives a program that generates five questions and, after a student answers all five, reports the number of correct answers. The program also displays the time spent on the
          test and lists all the questions.
        </p>
        <p>
          <span class="listingHeadingMain">Listing 5.4 -</span> <span class="listingHeadingTitle">SubtractionQuizLoop.java</span>
        </p>
        <pre class="javaCode">   1  <span class="javaKeyWord">import</span> java.util.Scanner;
   2 
   3  <span class="javaKeyWord">public class</span> SubtractionQuizLoop {
   4    <span class="javaKeyWord">public static void</span> main(String[] args) {
   5      <span class="javaKeyWord">final int</span> NUMBER_OF_QUESTIONS = <span class="javaInteger">5</span>; <span class="javaComment">// Number of questions</span>
   6      <span class="javaKeyWord">int</span> correctCount = <span class="javaInteger">0</span>; <span class="javaComment">// Count the number of correct answers</span>
   7      <span class="javaKeyWord">int</span> count = <span class="javaInteger">0</span>; <span class="javaComment">// Count the number of questions</span>
   8      <span class="javaHighlighted javaKeyWord">long</span><span class="javaHighlighted"> startTime = System.currentTimeMillis();</span>
   9      String output = <span class="javaString">" "</span>; <span class="javaComment">// output string is initially empty</span>
  10      Scanner input = <span class="javaKeyWord">new</span> Scanner(System.in);
  11      
<div class="keyTerm" value="loop"></div>  12      <span class="javaHighlighted javaKeyWord">while</span><span class="javaHighlighted"> (count &lt; NUMBER_OF_QUESTIONS) {</span>
  13        <span class="javaComment">// 1. Generate two random single-digit integers</span>
  14        <span class="javaKeyWord">int</span> number1 = (<span class="javaKeyWord">int</span>)(Math.random() * <span class="javaInteger">10</span>);
  15        <span class="javaKeyWord">int</span> number2 = (<span class="javaKeyWord">int</span>)(Math.random() * <span class="javaInteger">10</span>);
  16 
  17        <span class="javaComment">// 2. If number1 &lt; number2, swap number1 with number2</span>
  18        <span class="javaKeyWord">if</span> (number1 &lt; number2) {
  19          <span class="javaKeyWord">int</span> temp = number1;
  20          number1 = number2;
  21          number2 = temp;
  22        }
  23 
  24        <span class="javaComment">// 3. Prompt the student to answer "What is number1 – number2?"</span>
  25        System.out.print(
  26          <span class="javaString">"What is "</span> + number1 + <span class="javaString">" - "</span> + number2 + <span class="javaString">"? "</span>);
  27        <span class="javaKeyWord">int</span> answer = input.nextInt();
  28 
  29        <span class="javaComment">// 4. Grade the answer and display the result</span>
  30        <span class="javaHighlighted javaKeyWord">if</span><span class="javaHighlighted"> (number1 - number2 == answer) {</span>
  31          System.out.println(<span class="javaString">"You are correct!"</span>);
  32          correctCount++; <span class="javaComment">// Increase the correct answer count</span>
  33        }
  34        <span class="javaKeyWord">else</span>
  35          System.out.println(<span class="javaString">"Your answer is wrong.\n"</span> + number1
  36            + <span class="javaString">" - "</span> + number2 + <span class="javaString">" should be "</span> + (number1 - number2));
  37 
  38        <span class="javaComment">// Increase the question count</span>
  39        count++;
  40 
<div class="keyTerm" value="prepare output"></div>  41        output += <span class="javaString">"\n"</span> + number1 + <span class="javaString">"-"</span> + number2 + <span class="javaString">"="</span> + answer +
  42          ((number1 - number2 == answer) ? <span class="javaString">" correct"</span> : <span class="javaString">" wrong"</span>);
<div class="keyTerm" value="end loop"></div>  43      }
  44 
<div class="keyTerm" value="get end time"></div>  45      <span class="javaHighlighted javaKeyWord">long</span><span class="javaHighlighted"> endTime = System.currentTimeMillis();</span>
<div class="keyTerm" value="test time"></div>  46      <span class="javaHighlighted javaKeyWord">long</span><span class="javaHighlighted"> testTime = endTime - startTime;</span>
  47 
<div class="keyTerm" value="display result"></div>  48      System.out.println(<span class="javaString">"Correct count is "</span> + correctCount +
  49        <span class="javaString">"\nTest time is "</span> + testTime / <span class="javaInteger">1000</span> + <span class="javaString">" seconds\n"</span> + output);
  50    }
  51  }</pre>
        <div class="outputBox">
          <pre class="outputText">
What is 9 - 2? <span class="outputBoxHighlighted">7</span> <img src="chapters/RUN-icon.png" class="cleanuphtml-2" alt="" />
You are correct!
 
What is 3 - 0? <span class="outputBoxHighlighted">3</span> <img src="chapters/RUN-icon.png" class="cleanuphtml-2" alt="" />
You are correct!
 
What is 3 - 2? <span class="outputBoxHighlighted">1</span> <img src="chapters/RUN-icon.png" class="cleanuphtml-2" alt="" />
You are correct!
 
What is 7 - 4? <span class="outputBoxHighlighted">4</span> <img src="chapters/RUN-icon.png" class="cleanuphtml-2" alt="" />
Your answer is wrong.
7 - 4 should be 3
 
What is 7 - 5? <span class="outputBoxHighlighted">4</span> <img src="chapters/RUN-icon.png" class="cleanuphtml-2" alt="" />
Your answer is wrong.
7 - 5 should be 2
 
Correct count is 3
Test time is 1021 seconds

9-2=7 correct
3-0=3 correct
3-2=1 correct
7-4=4 wrong
7-5=4 wrong
</pre>
        </div>
        <p>
              The program uses the control variable <span class="highlightedWord">count</span> to control the execution of the loop. <span class="highlightedWord">count</span> is initially
          <span class="highlightedWord">0</span> (line 7) and is increased by <span class="highlightedWord">1</span> in each iteration (line 39). A subtraction question is displayed and processed in
          each iteration. The program obtains the time before the test starts in line 8 and the time after the test ends in line 45, and computes the test time in line 46. The test time is in
          milliseconds and is converted to seconds in line 49.
        </p>
        <p class="subSectionHeading">
          5.2.4 Controlling a Loop with a Sentinel Value
        </p>
        <p>
          Another common technique for controlling a loop is to designate a special value when reading and processing a set of values. This special input value, known as a <span class=
          "keyTerm">sentinel value</span>, signifies the end of the input. A loop that uses a sentinel value to control its execution is called a <span class="keyTerm">sentinel-controlled
          loop</span>.
        </p>
        <p>
              Listing 5.5 writes a program that reads and calculates the sum of an unspecified number of integers. The input <span class="highlightedWord">0</span> signifies the end of the input. Do
          you need to declare a new variable for each input value? No. Just use one variable named <span class="highlightedWord">data</span> (line 12) to store the input value and use a variable
          named <span class="highlightedWord">sum</span> (line 15) to store the total. Whenever a value is read, assign it to <span class="highlightedWord">data</span> and, if it is not zero, add it
          to <span class="highlightedWord">sum</span> (line 17).
        </p>
        <p>
          <span class="listingHeadingMain">Listing 5.5 -</span> <span class="listingHeadingTitle">SentinelValue.java</span>
        </p>
        <pre class="javaCode">   1  <span class="javaKeyWord">import</span> java.util.Scanner;
   2 
   3  <span class="javaKeyWord">public class</span> SentinelValue {
   4    /** Main method */
   5    <span class="javaKeyWord">public static void</span> main(String[] args) {
   6      <span class="javaComment">// Create a Scanner</span>
   7      Scanner input = <span class="javaKeyWord">new</span> Scanner(System.in);
   8 
   9      <span class="javaComment">// Read an initial data</span>
  10      System.out.print(
  11        <span class="javaString">"Enter an integer (the input ends if it is 0): "</span>);
<div class="keyTerm" value="input"></div>  12      <span class="javaKeyWord">int</span> data = input.nextInt();
  13 
  14      <span class="javaComment">// Keep reading data until the input is 0</span>
  15      <span class="javaKeyWord">int</span> sum = <span class="javaInteger">0</span>;
<div class="keyTerm" value="loop"></div>  16      <span class="javaHighlighted javaKeyWord">while</span><span class="javaHighlighted"> (data != </span><span class="javaHighlighted javaInteger">0</span><span class="javaHighlighted">) {</span>
  17        sum += data;
  18 
  19        <span class="javaComment">// Read the next data</span>
  20        System.out.print(
  21          <span class="javaString">"Enter an integer (the input ends if it is 0): "</span>);
  22        data = input.nextInt();
<div class="keyTerm" value="end of loop"></div>  23      }
  24 
<div class="keyTerm" value="display result"></div>  25      System.out.println(<span class="javaString">"The sum is "</span> + sum);
  26    }
  27  }   </pre>
        <div class="outputBox">
          <pre class="outputText">
Enter an integer (the input ends if it is 0): <span class="outputBoxHighlighted">2</span> <img src="chapters/RUN-icon.png" class="cleanuphtml-2" alt="" />
Enter an integer (the input ends if it is 0): <span class="outputBoxHighlighted">3</span> <img src="chapters/RUN-icon.png" class="cleanuphtml-2" alt="" />
Enter an integer (the input ends if it is 0): <span class="outputBoxHighlighted">4</span> <img src="chapters/RUN-icon.png" class="cleanuphtml-2" alt="" />
Enter an integer (the input ends if it is 0): <span class="outputBoxHighlighted">0</span> <img src="chapters/RUN-icon.png" class="cleanuphtml-2" alt="" />
The sum is 9
</pre>
        </div><br />
        <div class="traceBox">
          <table width="100%" cellpadding="5" cellspacing="0">
            <tr>
              <th colspan="2" class="cleanuphtml-3">
                 
              </th>
              <th width="15%" class="cleanuphtml-3">
                line#
              </th>
              <th width="15%" class="cleanuphtml-3">
                data
              </th>
              <th width="15%" class="cleanuphtml-3">
                sum
              </th>
              <th width="35%" class="cleanuphtml-3">
                output
              </th>
            </tr>
            <tr>
              <td width="16%" rowspan="2" align="right" valign="middle">
                 
              </td>
              <td width="4%" rowspan="2" class="traceBoxIterationBracket">
                 
              </td>
              <td>
                <strong>12</strong>
              </td>
              <td class="highlightedWord">
                2
              </td>
              <td class="highlightedWord"></td>
              <td class="highlightedWord"></td>
            </tr>
            <tr>
              <td>
                <strong>15</strong>
              </td>
              <td class="highlightedWord">
                 
              </td>
              <td class="highlightedWord">
                0
              </td>
              <td class="highlightedWord"></td>
            </tr>
            <tr>
              <td rowspan="2" align="right" valign="middle">
                iteration 1
              </td>
              <td rowspan="2" align="right" valign="middle" class="traceBoxIterationBracket">
                {
              </td>
              <td>
                <strong>17</strong>
              </td>
              <td class="highlightedWord">
                 
              </td>
              <td class="highlightedWord">
                2
              </td>
              <td class="highlightedWord"></td>
            </tr>
            <tr>
              <td>
                <strong>22</strong>
              </td>
              <td class="highlightedWord">
                3
              </td>
              <td class="highlightedWord"></td>
              <td class="highlightedWord">
                 
              </td>
            </tr>
            <tr>
              <td rowspan="2" align="right" valign="middle">
                iteration 2
              </td>
              <td rowspan="2" align="right" valign="middle" class="traceBoxIterationBracket">
                {
              </td>
              <td>
                <strong>17</strong>
              </td>
              <td class="highlightedWord">
                 
              </td>
              <td class="highlightedWord">
                5
              </td>
              <td class="highlightedWord"></td>
            </tr>
            <tr>
              <td>
                <strong>22</strong>
              </td>
              <td class="highlightedWord">
                4
              </td>
              <td class="highlightedWord"></td>
              <td class="highlightedWord">
                 
              </td>
            </tr>
            <tr>
              <td rowspan="2" align="right" valign="middle">
                iteration 3
              </td>
              <td rowspan="2" align="right" valign="middle" class="traceBoxIterationBracket">
                {
              </td>
              <td>
                <strong>17</strong>
              </td>
              <td class="highlightedWord">
                 
              </td>
              <td class="highlightedWord">
                9
              </td>
              <td class="highlightedWord"></td>
            </tr>
            <tr>
              <td>
                <strong>22</strong>
              </td>
              <td class="highlightedWord">
                0
              </td>
              <td class="highlightedWord"></td>
              <td class="highlightedWord">
                 
              </td>
            </tr>
            <tr>
              <td align="right" valign="middle">
                 
              </td>
              <td align="right" valign="middle">
                 
              </td>
              <td>
                <strong>25</strong>
              </td>
              <td class="highlightedWord">
                 
              </td>
              <td class="highlightedWord">
                 
              </td>
              <td class="highlightedWord">
                The sum is 9
              </td>
            </tr>
          </table>
        </div>
        <p>
              If <span class="highlightedWord">data</span> is not <span class="highlightedWord">0</span>, it is added to <span class="highlightedWord">sum</span> (line 17) and the next item of input
          data is read (lines 20-22). If <span class="highlightedWord">data</span> is <span class="highlightedWord">0</span>, the loop body is no longer executed and the <span class=
          "highlightedWord">while</span> loop terminates. The input value <span class="highlightedWord">0</span> is the sentinel value for this loop. Note that if the first input read is <span class=
          "highlightedWord">0</span>, the loop body never executes, and the resulting sum is <span class="highlightedWord">0</span>.
        </p>
        <div class="cautionBox">
          <span class="cautionCAUTION">CAUTION</span>
          <p>
            Don't use floating-point values for equality checking in a loop control. Because floating-point values are approximations for some values, using them could result in imprecise counter
            values and inaccurate results. Consider the following code for computing <span class="highlightedWord">1 + 0.9 + 0.8 + ... + 0.1</span>:
          </p>
          <pre class="javaCode">
  <span class="javaKeyWord">double</span> item = <span class="javaInteger">1</span>; <span class="javaKeyWord">double</span> sum = <span class="javaInteger">0</span>;
  <span class="javaKeyWord">while</span> (item != <span class="javaInteger">0</span>) { <span class="javaComment">// No guarantee item will be 0</span>
    sum += item;
    item -= <span class="javaDouble">0.1</span>;
  }
  System.out.println(sum);
</pre>
          <p>
            Variable <span class="highlightedWord">item</span> starts with <span class="highlightedWord">1</span> and is reduced by <span class="highlightedWord">0.1</span> every time the loop body
            is executed. The loop should terminate when <span class="highlightedWord">item</span> becomes <span class="highlightedWord">0</span>. However, there is no guarantee that <span class=
            "highlightedWord">item</span> will be exactly <span class="highlightedWord">0</span>, because the floating-point arithmetic is approximated. This loop seems okay on the surface, but it is
            actually an infinite loop.<div class="keyTerm" value="numeric error"></div>
          </p>
        </div>
        <p>
           
        </p>
        <p class="subSectionHeading">
          5.2.5 Input and Output Redirections
        </p>
        <p>
          In the preceding example, if you have a large number of data to enter, it would be cumbersome to type from the keyboard. You can store the data separated by whitespaces in a text file, say
          <strong>input.txt</strong>, and run the program using the following command:
        </p>
        <pre class="consoleCommand">
    java SentinelValue &lt; input.txt
</pre>
        <p>
              This command is called <span class="keyTerm">input redirection</span>. The program takes the input from the file <strong>input.txt</strong> rather than having the user type the data
          from the keyboard at runtime. Suppose the contents of the file are
        </p>
        <pre>
    2 3 4 5 6 7 8 9 12 23 32
    23 45 67 89 92 12 34 35 3 1 2 4 0
</pre>
        <p>
          The program should get <span class="highlightedWord">sum</span> to be <span class="highlightedWord">518</span>.
        </p>
        <p>
              Similarly, there is <span class="keyTerm">output redirection</span>, which sends the output to a file rather than displaying it on the console. The command for output redirection is:
        </p>
        <pre class="consoleCommand">
    java ClassName &gt; output.txt
</pre>
        <p>
              Input and output redirection can be used in the same command. For example, the following command gets input from <strong>input.txt</strong> and sends output to
          <strong>output.txt</strong>:
        </p>
        <pre class="consoleCommand">
    java SentinelValue  output.txt
</pre>
        <p>
          Try running the program to see what contents are in <strong>output.txt</strong>.
        </p>
        <table width="100%">
          <tr>
            <td width="6%" valign="top" class="checkpointNumber">
              <div class="checkpoint"></div>5.1
            </td>
            <td width="94%">
              <p>
                Analyze the following code. Is count &lt; 100 always true, always false, or sometimes true or sometimes false at Point A, Point B, and Point C?
              </p>
              <pre class="javaCode">
  <span class="javaKeyWord">int</span> count = <span class="javaInteger">0</span>;
  <span class="javaKeyWord">while</span> (count &lt; <span class="javaInteger">100</span>) {
    <span class="javaComment">// Point A</span>
    System.out.println(<span class="javaString">"Welcome to Java!"</span>);
    count++;
    <span class="javaComment">// Point B</span>
  }
  <span class="javaComment">// Point C</span>
</pre>
            </td>
          </tr>
          <tr>
            <td valign="top" class="checkpointNumber">
              5.2
            </td>
            <td>
              <p>
                What is wrong if guess is initialized to 0 in line 11 in Listing 5.3?
              </p>
            </td>
          </tr>
          <tr>
            <td valign="top" class="checkpointNumber">
              5.3
            </td>
            <td>
              <p>
                How many times are the following loop bodies repeated? What is the output of each loop?
              </p>
            </td>
          </tr>
          <tr>
            <td valign="top"></td>
            <td valign="top">
              <img width="181" height="78" src="chapters/Chapter5-Better_image008.png" alt="" /><img width="182" height="78" src="chapters/Chapter5-Better_image009.png" alt="" /><img width="182" height="78" src=
              "chapters/Chapter5-Better_image010.png" alt="" />
            </td>
          </tr>
          <tr>
            <td valign="top" class="checkpointNumber">
              5.4
            </td>
            <td>
              <p>
                Suppose the input is <span class="highlightedWord">2 3 4 5 0</span>. What is the output of the following code?
              </p>
              <pre class="javaCode">
  <span class="javaKeyWord">import</span> java.util.Scanner;
 
  <span class="javaKeyWord">public class</span> Test {
    <span class="javaKeyWord">public static void</span> main(String[] args) {
      Scanner input = new Scanner(System.in);
     
      <span class="javaKeyWord">int</span> number, max;
      number = input.nextInt();
      max = number;
   
      <span class="javaKeyWord">while</span> (number != <span class="javaInteger">0</span>) {
        number = input.nextInt();
        <span class="javaKeyWord">if</span> (number &gt; max)
          max = number;
      }
 
      System.out.println(<span class="javaString">"max is "</span> + max);
      System.out.println(<span class="javaString">"number "</span> + number);
    }
  }
</pre>
            </td>
          </tr>
          <tr>
            <td valign="top" class="checkpointNumber">
              5.5
            </td>
            <td>
              <p>
                What is the output of the following code? Explain the reason.
              </p>
              <pre class="javaCode">
  <span class="javaKeyWord">int</span> x = <span class="javaInteger">80000000</span>;
 
  <span class="javaKeyWord">while</span> (x &gt; <span class="javaInteger">0</span>)
    x++;
 
  System.out.println(<span class="javaString">"x is "</span> + x);
</pre>
            </td>
          </tr>
        </table>
        <p class="quizHeading">Quiz Time!</p>
        <p>Click the buttons below to answer the quiz questions. Your progress will be tracked.</p>
        <b:buttonToolbar>
            <b:buttonGroup>
                <button id="btrigger1" class="btn btn-warning" data-toggle="modal" data-target="#amodal">5.1</button>
                <button id="btrigger2" class="btn btn-primary" data-toggle="modal" data-target="#amodal">Needs answer</button>
            </b:buttonGroup>
            <b:buttonGroup>
                <button id="btrigger1" class="btn btn-warning" data-toggle="modal" data-target="#amodal">5.2</button>
                <button id="btrigger2" class="btn btn-danger" data-toggle="modal" data-target="#amodal">Incorrect :(</button>
            </b:buttonGroup>
            <b:buttonGroup>
                <button id="btrigger1" class="btn btn-warning" data-toggle="modal" data-target="#amodal">5.3</button>
                <button id="btrigger2" class="btn btn-success" data-toggle="modal" data-target="#amodal">Correct! :)</button>
            </b:buttonGroup>
        </b:buttonToolbar>
        <iframe src="chapters/wordmatch/Section5_2.html" width="100%" height="400px" frameborder="0"></iframe>
        <p class="sectionHeading">
          <a id="5-3"></a>5.3 The <span class="highlightedWord">do-while</span> Loop
        </p>
        <p class="keyPoint">
          A <span class="highlightedWord">do-while</span> loop is the same as a <span class="highlightedWord">while</span> loop except that it executes the loop body first and then checks the loop
          continuation condition.
        </p>
        <p>
          <div class="keyTerm" value="do-while loop"></div>The <span class="highlightedWord">do-while</span> loop is a variation of the <span class="highlightedWord">while</span> loop. Its syntax is:
        </p>
        <pre class="javaCode">
  <span class="javaKeyWord">do</span> {
    <span class="javaComment">// Loop body;</span>
    Statement(s);
  } <span class="javaKeyWord">while</span> (loop-continuation-condition);
</pre>
        <p>
              Its execution flowchart is shown in Figure 5.2.
        </p>
        <p>
          <img width="140" height="202" src="chapters/Chapter5-Better_image011.jpg" alt="" />
        </p>
        <p class="figureText">
          <span class="figureHeading">Figure 5.2:</span> The <span class="highlightedWord">do-while</span> loop executes the loop body first, then checks the <span class=
          "highlightedWord">loop-continuation-condition</span> to determine whether to continue or terminate the loop.
        </p>
        <p>
              The loop body is executed first, and then the <span class="highlightedWord">loop-continuation-condition</span> is evaluated. If the evaluation is <span class=
          "highlightedWord">true</span>, the loop body is executed again; if it is <span class="highlightedWord">false</span>, the do-while loop terminates. The difference between a <span class=
          "highlightedWord">while</span> loop and a <span class="highlightedWord">do-while</span> loop is the order in which the <span class="highlightedWord">loop-continuation-condition</span> is
          evaluated and the loop body executed. You can write a loop using either the <span class="highlightedWord">while</span> loop or the <span class="highlightedWord">do-while</span> loop.
          Sometimes one is a more convenient choice than the other. For example, you can rewrite the <span class="highlightedWord">while</span> loop in Listing 5.5 using a <span class=
          "highlightedWord">do-while loop</span>, as shown in Listing 5.6.
        </p>
        <p>
          <span class="listingHeadingMain">Listing 5.6 -</span> <span class="listingHeadingTitle">TestDoWhile.java</span>
        </p>
        <pre class="javaCode">   1  <span class="javaKeyWord">import</span> java.util.Scanner;
   2 
   3  <span class="javaKeyWord">public class</span> TestDoWhile {
   4    <span class="javaComment">/** Main method */</span>
   5    <span class="javaKeyWord">public static void</span> main(String[] args) {
   6      <span class="javaKeyWord">int</span> data;
   7      <span class="javaKeyWord">int</span> sum = <span class="javaInteger">0</span>;
   8 
   9      <span class="javaComment">// Create a Scanner</span>
  10      Scanner input = <span class="javaKeyWord">new</span> Scanner(System.in);
  11 
  12      <span class="javaComment">// Keep reading data until the input is 0</span>
<div class="keyTerm" value="loop"></div>  13      <span class="javaHighlighted javaKeyWord">do</span><span class="javaHighlighted"> {</span>
  14        <span class="javaComment">// Read the next data</span>
  15        System.out.print(
  16          <span class="javaString">"Enter an integer (the input ends if it is 0): "</span>);
  17        data = input.nextInt();
  18 
  19        sum += data;
<div class="keyTerm" value="end loop"></div>  20      <span class="javaHighlighted">} </span><span class="javaHighlighted javaKeyWord">while</span><span class="javaHighlighted"> (data != </span><span class="javaHighlighted javaInteger">0</span><span class="javaHighlighted">);</span>
  21 
  22      System.out.println(<span class="javaString">"The sum is "</span> + sum);
  23    }
  24  }</pre>
        <div class="outputBox">
          <pre class="outputText">
Enter an integer (the input ends if it is 0): <span class="outputBoxHighlighted">3</span> <img src="chapters/RUN-icon.png" class="cleanuphtml-2" alt="" />
Enter an integer (the input ends if it is 0): <span class="outputBoxHighlighted">5</span> <img src="chapters/RUN-icon.png" class="cleanuphtml-2" alt="" />
Enter an integer (the input ends if it is 0): <span class="outputBoxHighlighted">6</span> <img src="chapters/RUN-icon.png" class="cleanuphtml-2" alt="" />
Enter an integer (the input ends if it is 0): <span class="outputBoxHighlighted">0</span> <img src="chapters/RUN-icon.png" class="cleanuphtml-2" alt="" />
The sum is 14
</pre>
        </div><br />
        <div class="tipBox">
          <span class="tipTIP">TIP</span>
          <p>
            Use a <span class="highlightedWord">do-while</span> loop if you have statements inside the loop that must be executed at least once, as in the case of the <span class=
            "highlightedWord">do-while</span> loop in the preceding <span class="highlightedWord">TestDoWhile</span> program. These statements must appear before the loop as well as inside it if you
            use a <span class="highlightedWord">while</span> loop.
          </p>
        </div><br />
        <table width="100%">
          <tr>
            <td width="6%" valign="top" class="checkpointNumber">
              <div class="checkpoint"></div>5.6
            </td>
            <td width="94%">
              <p>
                Suppose the input is <span class="highlightedWord">2 3 4 5 0</span>. What is the output of the following code?
              </p>
              <pre class="javaCode">
  <span class="javaKeyWord">import</span> java.util.Scanner;
  
  <span class="javaKeyWord">public class</span> Test {
    <span class="javaKeyWord">public static void</span> main(String[] args) {
      Scanner input = <span class="javaKeyWord">new</span> Scanner(System.in);

      <span class="javaKeyWord">int</span> number, max;
      number = input.nextInt();
      max = number;

      <span class="javaKeyWord">do</span> {
        number = input.nextInt();
        if (number &gt; max)
          max = number;
      } <span class="javaKeyWord">while</span> (number != <span class="javaInteger">0</span>);

      System.out.println(<span class="javaString">"max is "</span> + max);
      System.out.println(<span class="javaString">"number "</span> + number);
    }
  }
</pre>
            </td>
          </tr>
          <tr>
            <td valign="top" class="checkpointNumber">
              5.7
            </td>
            <td>
              <p>
                What are the differences between a <span class="highlightedWord">while</span> loop and a <span class="highlightedWord">do-while</span> loop? Convert the following <span class=
                "highlightedWord">while</span> loop into a <span class="highlightedWord">do-while loop</span>.
              </p>
              <pre class="javaCode">
  Scanner input = <span class="javaKeyWord">new</span> Scanner(System.in);
  <span class="javaKeyWord">int</span> sum = <span class="javaInteger">0</span>;
  System.out.println(<span class="javaString">"Enter an integer "</span> +
    <span class="javaString">"(the input ends if it is 0)"</span>);
  <span class="javaKeyWord">int</span> number = input.nextInt();
  <span class="javaKeyWord">while</span> (number != <span class="javaInteger">0</span>) {
    sum += number;
    System.out.println(<span class="javaString">"Enter an integer "</span> +
      <span class="javaString">"(the input ends if it is 0)"</span>);
    number = input.nextInt();
  }
</pre>
            </td>
          </tr>
        </table><br />
        <iframe width="420" height="315" src="http://www.youtube.com/embed/ViuCqrUSTMU" frameborder="0"></iframe>
      </div>
    </div><script type="text/javascript">

    </script>
    </ui:composition>
  </body>
</html>